'number' + 3 + 3;
/* Результат: 'number33'
Пояснення: оператор + лівоасоціативний, розрахунок відбувається в такому порядку:
'number' + 3 = 'number3'
'number3' + 3 = 'number33'
Оператор + приводить число до string і виконується конкатинація рядків 
(якщо хоч один з операндів - рядок, то інший операнд буде приведений до рядка)
 */

null + 3;
/* Результат: 3
Пояснення: арифметичний оператор + перетворює null до числа. Null при приведенні до числа = 0.
0 + 3 = 3 */
 
5 && "qwerty";
/* Результат: "qwerty"
Пояснення: логічне і працює наступним чином:
expr1 && expr2
повертає expr1, якщо воно є false або ж може бути приведене до false,
в інщому випадку повертає expr2.
5 перетворюється в true, тому оператор повертає expr2, тобто "qwerty"
 */

+'40' + +'2' + "hillel"
/* Результат: "42hillel"
Пояснення: унарний оператор + має пріорітет вище, ніж оператор додавання +.
Тому спочатку приводятся стрінги "40" і "2" в числа. Так як оператор + лівоасоціативний, то відбувається додаванння числе 40 і 2, результат 42.
Оскільки наступний операнд - стрінга, то відбувається приведення іншого операнда в стрінг, в рещультаті чого вдібувається конкатенація рядків
"42" и "hillel" */

'10' - 5 === 6
/* Результат: false
Пояснення: оператор віднімання має пріоритет вище, ніж оператор строгого порівняння, тому спочитку виконується віднімання
На відміну від оператора додавання, оператор віднімання працює лише з числами.
Тому якщо операнд не число, то він намагається привести його до числа.
Рядок "10" - число, в результаті віднімання отримуємо 5.
Далі відбувається порівняння 5 === 6, в результаті отримуємо false
 */

true + false
/* Результат: 1
Пояснення: Оператор + приводить true до числа 1, а false до числа 0.
 */

'4px' - 3
/* Результат: NaN
Пояснення: Оператор віднімання намагається привести стрінг '4px' до числа.
Результатом приведення є NaN - not a number.
NaN - 3 = NaN, оскільки будь-яка операція з NaN повертає NaN.
 */

'4' - 3
/* Результат: 1
Пояснення: Оператор віднімання приводить рядок '4' до числа і потім виконується віднімання 4-3
*/

'6' + 3**0
/* Результат: "61"
ПОяснення: Оператор зведення в ступінь має вище пріорітет, ніж оператор додавання.
Результат зведення в 0 ступін є 1. При додавання рядка і числа число приводиться до рядка і відбувається конкатенація
 */

12 / '6'
/* Результат: 2
Пояснення: один з операндів - рядок. Оператор ділення приводить рядок "6" до числа, далі відбувається ділення 12 на 6
 */

'10' + (5 === 6)
/* Результат: "10false"
ПоясненняЖ круглі дужки змінюють пріоритет виконання операцій. Спочатку виконується 5 === 6 з результатом false. Потім оператор додавання
приводить false до рядку та здійснюється конкатенація
*/

null == ''
/* Результат: false
Пояснення: якщо у оператора порівняння один з операндів null, то true повернеться якщо інший операнд також null, в іншому випадку повернеться false.
 */

3 ** (9/3)
/* Результат: 27
Пояснення: оператор зведення в ступінь має більший пріорітет, ніж оператор ділення, але круглі дужки змінюють пріорітет виконання. 
ТОму перша дія - ділення 9 на 3, а потім зведення в ступінь.
*/

!!'false' == !!'true'
/* Результат: true
Пояснення: оператор заперечення має вищий пріорітет ніж оператор порівняння і виконується першим.
Подвійне заперечення є явним приведенням даних до типу boolean. Непустий рядок приводиться до true.
В кінцевому результаті маємо порівняння true == true.
 */

0 || '0' && 1
/* Результат:1
Пояснення: оператор  &&  має пріорітет вище ніж ||, тому виконується першим.
Оператором && значення '0' трактуеться як true, тому повертається 1.
Аісля цього виконується оператор АБО 0 || 1.
Оператор || лівоасоціативний. Значення 0 не може бути приведено до true, тоді повертається 1.
 */

(+null == false) < 1
/* Результат: false
Пояснення: перший діє унірний оператор + приводить null до 0.
Друга дія порівняння 0 == false. 0 приводиться до false, false == false дає true.
Третя дія - порівняння true < 1. True приводиться до 1, 1 < 1 дає false. */


false && true || true
/* Результат:true
Пояснення: першим виконується логічне І. false && true дає false.
Друга дія логичне АБО. false || true дає true.
 */

false && (false || true)
/* Результат:false
Пояснення: перша дія логічне АБО, так як воно заключене в круглі дужки. false || true дає true.
Друга дія - логічне І. false && true дає false. */

(+null == false) < 1**5
/* Результат false
Оператор зведення в ступінь має пріорітет вище оператора порівняння.
Перша дія - зведення в ступінь 1**5, що дає 1.
Далі аналогічно описаному прикладу (+null == false) < 1 */